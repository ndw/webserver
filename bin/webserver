#!/usr/bin/env python3

"""Start an Apache webserver running in a Docker container."""

import os
import sys
import click
import docker

VERSION="1.0.0"
DETAILS="https://github.com/ndw/webserver"

class DockerWebServer:
    """Interact with Docker containers running the Apache webserver."""

    container_name = "httpd:2.4"
    container_root = "/usr/local/apache2/htdocs"
    default_port = 8125
    default_root = "."

    def __init__(self, show_list):
        """Create the class."""
        self.client = docker.from_env()
        self.apiclient = docker.APIClient(base_url='unix://var/run/docker.sock')
        self.servers = {}

        total_containers = 0
        server_containers = 0
        for container in self.client.containers.list():
            total_containers += 1
            for tag in container.image.tags:
                if tag == DockerWebServer.container_name:
                    server_containers += 1
                    self.servers[container.id] = {
                        'name': container.name,
                        'container': container
                    }
                    details = self.apiclient.inspect_container(container.id)
                    # Find the binding for port 80
                    bindings = details["HostConfig"]["PortBindings"]["80/tcp"]
                    # Assume there's only one binding
                    self.servers[container.id]['port'] = int(bindings[0]["HostPort"])

                    for binding in details["HostConfig"]["Binds"]:
                        parts = binding.split(":")
                        if parts[1] == DockerWebServer.container_root:
                            self.servers[container.id]["root"] = parts[0]

                    if show_list:
                        print(f"Serving {self.servers[container.id]['root']}" +
                              f" on port {self.servers[container.id]['port']}" +
                              f" with {container.name}")
        if show_list:
            if total_containers == 0:
                print("No containers are running")
            else:
                print(f"Web servers are {server_containers} of {total_containers} containers")

    def find(self, name, port=None):
        """Find a server by name or port."""
        for server in self.servers.values():
            if name == server['name']:
                return server
        if port:
            for server in self.servers.values():
                if port == server['port']:
                    return server
        return None

    def stop_all(self):
        """Stop all the running webservers."""
        for server in self.servers.values():
            print(f"Stopping {server['name']} on port {server['port']}")
            server["container"].stop()
        self.servers = {}

    def stop(self, name):
        """Stop a particular webserver by name."""
        server = self.find(name)
        if server:
            print(f"Stopping {name} on port {server['port']}")
            server["container"].stop()
            return True

        print(f"No web server named “{name}” is currently running")
        return False


    def start(self, name, port, root):
        """Start a webserver.

        If no name is specified, a random name will be selected by Docker.
        If no port is specified, the default port (or the next apparently
        available port above the default port) will be used. If no root
        is specified, the current working directory will be used.
        """

        if not port:
            port = DockerWebServer.default_port
            while self.find(None, port):
                port += 1

        if not root:
            root = os.getcwd()

        server_root = os.path.abspath(root)

        server = self.find(name, port)
        if server:
            name = server['name']
            port = server['port']
            print(f"There is already a server named {name} on port {port}",
                  file=sys.stderr)
            return None

        if name:
            container = self.client.containers.run(
                DockerWebServer.container_name,
                auto_remove=True,
                tty=True,
                ports={ '80/tcp': port },
                volumes={ server_root: {'bind': DockerWebServer.container_root, 'mode': 'ro'} },
                detach=True,
                name=name)
        else:
            container = self.client.containers.run(
                DockerWebServer.container_name,
                auto_remove=True,
                tty=True,
                ports={ '80/tcp': port },
                volumes={ server_root: {'bind': DockerWebServer.container_root, 'mode': 'ro'} },
                detach=True)

        name = container.name
        details = self.apiclient.inspect_container(container.id)
        # Find the binding for port 80
        bindings = details["HostConfig"]["PortBindings"]["80/tcp"]
        # Assume there's only one binding
        port = bindings[0]["HostPort"]
        for binding in details["HostConfig"]["Binds"]:
            parts = binding.split(":")
            if parts[1] == DockerWebServer.container_root:
                root = parts[0]

        server = {
            'name': container.name,
            'container': container,
            'port': port,
            'root': root
            }
        self.servers[container.id] = server

        print(f"Started {name} on port {port} serving {root}")
        return server


@click.command()
@click.option("--port", "-p", help="Server port", type=int)
@click.option("--root", "-r", help="Server root")
@click.option("--start", "-s", help="Start web server container")
@click.option("--stop", help="Stop web server container")
@click.option("--stop-all", help="Stop all web server containers", is_flag=True)
@click.option("--list", "list_", help="List running webserver containers", is_flag=True)
@click.option("--logs", "-l", help="Show the logs for a container")
@click.option("--foreground", "-f", help="Show the logs in the foreground", is_flag=True)
@click.option("--version", help="Show version information", is_flag=True)
# pylint: disable=R0913
def webserver(port, root, start, stop, stop_all, list_, version, logs, foreground):
    """Start a webserver in a Docker container."""

    if version:
        print(f"Webserver version {VERSION}")
        print(f"See {DETAILS} or --help for more information")
        if not start and not stop and not stop_all and not list_:
            return
    
    servers = DockerWebServer(list_)

    error = False
    if stop or stop_all:
        if stop_all:
            servers.stop_all()
        else:
            error = not servers.stop(stop)

    if start or (not list_ and not logs and not stop and not stop_all):
        server = servers.start(start, port, root)
        error = not server

    if error:
        sys.exit(1)

    if logs:
        server = servers.find(logs)
        if not server:
            print(f"No web server named “{logs}” is currently running")
            return

    if logs or foreground:
        gen = server["container"].logs(stream=True, follow=foreground)
        try:
            line = ""
            while True:
                ch = next(gen).decode("UTF-8")
                if ord(ch) == 13:
                    pass
                elif ord(ch) == 10:
                    print(line)
                    line = ""
                else:
                    line += ch
        except StopIteration:
            pass
        except KeyboardInterrupt:
            pass
        
if __name__ == '__main__':
    # I know there aren't any values, click does that
    # pylint: disable=E1120
    webserver()
